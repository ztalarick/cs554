'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapConfToOutput = mapConfToOutput;
exports.logOutput = logOutput;

var _pluralize = require('pluralize');

var _pluralize2 = _interopRequireDefault(_pluralize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function pif(word, count) {
  return count === 1 ? word : (0, _pluralize2.default)(word);
}

function mapConfToOutput(conf) {

  var created = conf.filter(function (item) {
    return item._fileStatus === 'created';
  });
  var modified = conf.filter(function (item) {
    return item._fileStatus === 'modified';
  });
  var skipped = conf.filter(function (item) {
    return item._fileStatus === 'skipped';
  });

  return { created: created, modified: modified, skipped: skipped };
}

function logOutput(output) {

  if (output.created && output.created.length > 0) {
    console.log('created ' + output.created.length + ' ' + pif('file', output.created.length) + ':');

    output.created.forEach(function (createdItem) {
      console.log('  ' + createdItem._path);
    });
  }

  if (output.modified && output.modified.length > 0) {
    console.log('modified ' + output.modified.length + ' ' + pif('file', output.modified.length) + ':');

    output.modified.forEach(function (modifiedItem) {
      console.log('  ' + modifiedItem._path);
    });
  }

  if (output.skipped && output.skipped.length > 0) {
    console.log('skipped ' + output.skipped.length + ' ' + pif('file', output.skipped.length) + ':');

    output.created.forEach(function (skippedItem) {
      console.log('  ' + skippedItem._path);
    });
  }
}