'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapConfToDiff = mapConfToDiff;

var _lodash = require('lodash.unset');

var _lodash2 = _interopRequireDefault(_lodash);

var _thenify = require('thenify');

var _thenify2 = _interopRequireDefault(_thenify);

var _fs = require('fs');

var _deepDiff = require('deep-diff');

var _deepDiff2 = _interopRequireDefault(_deepDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var readFilePromise = (0, _thenify2.default)(_fs.readFile);

function itemToDiff(item, itemIndex) {

  return new Promise(function (resolve, reject) {
    return readFilePromise(item._path).then(function (fileBuffer) {
      var body = fileBuffer.toString();
      var current = JSON.parse(body);
      var comparison = compare(item, current);

      item._diff = comparison;

      resolve(item);
    }).catch(function (e) {
      if (e.code === 'ENOENT') {
        item._diff = true;
        resolve(item);
      } else {
        reject(e);
      }
    });
  });
}

function compare(item, currentObj) {

  var newObj = JSON.parse(JSON.stringify(item._result));

  if (item.excludeFromDiff) {

    if (typeof item.excludeFromDiff === 'string') {
      item.excludeFromDiff = [item.excludeFromDiff];
    }

    item.excludeFromDiff.forEach(function (excludePath) {
      (0, _lodash2.default)(currentObj, excludePath);
      (0, _lodash2.default)(newObj, excludePath);
    });
  }

  var differences = (0, _deepDiff2.default)(currentObj, newObj);
  return differences !== undefined;
}

function mapConfToDiff(conf) {

  var allItems = conf.map(itemToDiff);
  return Promise.all(allItems);
}