'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapConfToFilePaths = mapConfToFilePaths;
exports.mapConfToFiles = mapConfToFiles;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _thenify = require('thenify');

var _thenify2 = _interopRequireDefault(_thenify);

var _fileWriteError = require('./errors/file-write-error');

var _fileWriteError2 = _interopRequireDefault(_fileWriteError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var writeFilePromise = (0, _thenify2.default)(_fs.writeFile);
var mkdirpPromise = (0, _thenify2.default)(_mkdirp2.default);
var cwd = process.cwd();

function itemToFilePath(item) {

  var pathToWrite = item.filePath;

  if (!_path2.default.isAbsolute(pathToWrite)) {
    pathToWrite = _path2.default.resolve(cwd, pathToWrite);
  }

  if (_path2.default.extname(pathToWrite) !== '.json') {
    var parsed = _path2.default.parse(pathToWrite);
    pathToWrite = parsed.dir + '/' + parsed.name + '.json';
  }

  item._path = pathToWrite;

  return Promise.resolve(item);
}

function itemToFile(item, itemIndex) {

  if (!item._diff) {
    item._fileStatus = 'skipped';
    return Promise.resolve(item);
  }

  return new Promise(function (resolve, reject) {

    (0, _fs.exists)(item._path, function (fileExists) {
      item._fileStatus = fileExists ? 'modified' : 'created';
      var fileBody = JSON.stringify(item._result, null, 2);

      mkdirpPromise(_path2.default.dirname(item._path)).then(function () {
        return writeFilePromise(item._path, fileBody);
      }).then(function () {
        resolve(item);
      }).catch(function (e) {
        reject(new _fileWriteError2.default('there was an error writing a file', { itemIndex: itemIndex }));
      });
    });
  });
}

function mapConfToFilePaths(conf) {

  var allItems = conf.map(itemToFilePath);
  return Promise.all(allItems);
}

function mapConfToFiles(conf) {

  var allItems = conf.map(itemToFile);
  return Promise.all(allItems);
}